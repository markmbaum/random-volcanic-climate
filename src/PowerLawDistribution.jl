module PowerLawDistribution

using Distributions
using UnPack
using Roots
using Random: AbstractRNG
using Cubature: hquadrature

import Base: rand
import Statistics: mean, var

export PowerLaw, ‚à´, mean, var, rand

struct PowerLaw <: Sampleable{Univariate,Continuous}
    x‚ÇÅ::Float64
    x‚ÇÇ::Float64
    C::Float64
    Œ≥::Float64
    Œº::Float64
    œÉ¬≤::Float64
end

function Base.show(io::IO, D::PowerLaw)
    @unpack x‚ÇÅ, x‚ÇÇ, Œ≥, Œº, œÉ¬≤ = D
    println(io, "PowerLaw")
    println(io, "  x‚ÇÅ = $x‚ÇÅ")
    println(io, "  x‚ÇÇ = $x‚ÇÇ")
    println(io, "  Œ≥ = $Œ≥")
    println(io, "  Œº = $Œº")
    print(io, "  œÉ¬≤ = $œÉ¬≤")
end

function plmean(x‚ÇÅ, x‚ÇÇ, Œ≥)
    x‚ÇÅ == x‚ÇÇ && return x‚ÇÅ
    g = Œ≥ + 1
    h = Œ≥ + 2
    Œº = g*(x‚ÇÇ^h - x‚ÇÅ^h)/(h*(x‚ÇÇ^g - x‚ÇÅ^g))
    return Œº
end

function plvar(x‚ÇÅ, x‚ÇÇ, Œ≥)
    x‚ÇÅ == x‚ÇÇ && return zero(x‚ÇÅ)
    g = Œ≥ + 1
    h = Œ≥ + 2
    k = Œ≥ + 3
    Œº = plmean(x‚ÇÅ, x‚ÇÇ, Œ≥)
    œÉ¬≤ = (g/(x‚ÇÇ^g - x‚ÇÅ^g))*((x‚ÇÇ^k - x‚ÇÅ^k)/k - 2Œº*(x‚ÇÇ^h - x‚ÇÅ^h)/h + Œº^2*(x‚ÇÇ^g - x‚ÇÅ^g)/g)
    return œÉ¬≤
end

function plnorm(x‚ÇÅ, x‚ÇÇ, Œ≥)
    g = Œ≥ + 1
    C = g/(x‚ÇÇ^g - x‚ÇÅ^g)
    return C
end

function plx‚ÇÅ(Œº, x‚ÇÇ, Œ≥)
    x‚ÇÄ = float(Œº)
    n::Int64 = 0
    while plmean(x‚ÇÄ, x‚ÇÇ, Œ≥) > Œº
        x‚ÇÄ /= 10
        n += 1
        n > 100 && error("x‚ÇÄ=$x‚ÇÄ, failure to construct power law distribution")
    end
    tol = 1e-12
    find_zero(
        x -> plmean(x, x‚ÇÇ, Œ≥) - Œº,
        (x‚ÇÄ, x‚ÇÇ),
        atol=tol,
        rtol=tol,
        xatol=tol,
        xrtol=tol
    )
end

function ‚à´(D::PowerLaw)
    @unpack x‚ÇÅ, x‚ÇÇ, Œ≥, C = D
    hquadrature(x -> C*x^Œ≥, x‚ÇÅ, x‚ÇÇ)[1]
end

function PowerLaw(Œº::Real, x‚ÇÇ::Real, Œ≥::Real)
    @assert Œ≥ < -1 "gamma must be < -1"
    @assert !(Œ≥ ‚àà (-1,-2,-3)) "gamma can't be -1, -2, or -3"
    #find the lower boundary of the distribution
    x‚ÇÅ = (Œº == x‚ÇÇ) ? Œº : plx‚ÇÅ(Œº, x‚ÇÇ, Œ≥)
    #normalization coefficient
    C = plnorm(x‚ÇÅ, x‚ÇÇ, Œ≥)
    #variance
    œÉ¬≤ = plvar(x‚ÇÅ, x‚ÇÇ, Œ≥)
    #construct
    PowerLaw(x‚ÇÅ, x‚ÇÇ, C, Œ≥, Œº, œÉ¬≤)
end

#--------------------------------------
# sampling

mean(D::PowerLaw) = D.Œº

var(D::PowerLaw) = D.œÉ¬≤

#--------------------------------------
# sampling

function sample(D::PowerLaw, ùí∞)
    @unpack x‚ÇÅ, x‚ÇÇ, Œ≥ = D
    g = Œ≥ + 1
    ((x‚ÇÇ^g - x‚ÇÅ^g)*ùí∞ + x‚ÇÅ^g)^(1/g)
end

rand(D::PowerLaw) = sample(D, Base.rand())

rand(D::PowerLaw, n::Int) = map(i->rand(D), 1:n)

rand(rng::AbstractRNG, D::PowerLaw) = sample(D, rand(rng))

rand(rng::AbstractRNG, D::PowerLaw, n::Int) = map(i->rand(rng, D), 1:n)

end
